#!/usr/bin/env zsh


##
# Capture and display output simultaneously.
#
# This is simply a convenience.
function capture() { tee captured.log; }


##
# Toggle macos' Spotlight indexing.
#
# Every now and again, macos loses its mind trying to index the filesystem.
# When it does this, it hogs a TON of resources. Since I never use finder, this
# command disables this feature.
function toggle_spotlight() {
  mdutil -as | grep --quiet "enabled"; local SPOTLIGHT_ENABLED="$?"
  [ "$SPOTLIGHT_ENABLED" -eq 0 ] && sudo mdutil -a -i off || sudo mdutil -a -i on
}

##
# Launch a local docker registry container.
#
# This can be convenient for pushing/pulling tagged docker images without a
# dockerhub account.
function docker_launch_registry_container() {
  command -v docker; [ "$?" -eq 0 ] || { echo "Install: docker."; return 1; }
  command docker run --detach \
                     --name registry \
                     --restart always \
                     --publish 5000:5000 \
                     registry:2
}

##
# Launch a local docker Jenkins container.
#
# By default Jenkins expects to have access to code in $HOME/Documents.
# If this is not the case, you can pass in a directory which contains the code
# to be built as a positional argument to this function.
function docker_launch_jenkins_container() {
  command -v docker; [ "$?" -eq 0 ] || { echo "Install: docker."; return 1; }
  local CODEDIR="${1:-$HOME/Documents}"
  command docker run --rm \
                     --detach \
                     --user root \
                     --publish 8080:8080 \
                     --publish 50000:50000 \
                     --volume "$CODEDIR":/var/jenkins_home/code \
                     --volume jenkins-data:/var/jenkins_home \
                     --volume /var/run/docker.sock:/var/run/docker.sock \
                     jenkinsci/blueocean
}

##
# Output a list of the top N processes hogging my CPU!
#
# Pass an integer N to this function to output only the top N. Defaults to 10.
function utilization() {
  command ps -cu "$USER" -r -o pid,command,%cpu,%mem | command head -n "${1:-11}"
}

##
# Watch directory and perform some compound command which takes an event as an
# argument upon any changes detected.
function watch_and_do() {
  local DIR="$1"; local CMD="$2"
  fswatch -0 "$DIR" | while read -d "" EVENT; do "$CMD" ${EVENT}; done
}

##
# Find all git repositories which match PATTERN and perform command.
function find_and_do() {
  command -v git; [ "$?" -eq 0 ] || { echo "Install: git."; return 1; }

  local MAX_SEARCH_DEPTH=5
  local PATTERN="$1"; shift
  local SEARCH="**/*/$PATTERN/.git"

  find "$PWD" -type d \
              -path "$SEARCH" \
              -maxdepth "$MAX_SEARCH_DEPTH" \
              -execdir pwd \; \
              -execdir "$@" \;
}

##
# Vagabond is polite vagrant.
#
# This function allows arbitrary vagrant commands to be run from anywhere
# rather than the vagrant image repository.
function vagabond () {
  [ "$#" -lt 2 ] && { echo "Usage: vagabond PROJECT CMD"; return 2; }

  local MAX_RECURSION_DEPTH=4
  local TOP_LEVEL="$HOME/Documents"
  local VAGRANT_FILE="*/$1/Vagrantfile"
  local VAGRANT_CMD=("${@:2}")

  find $TOP_LEVEL -type f \
                  -path $VAGRANT_FILE \
                  -maxdepth $MAX_RECURSION_DEPTH \
                  -execdir command vagrant $VAGRANT_CMD \;
}

##
# Update all git repositories found beneath PWD. Skip any repositories that
# contain changes.
function sync_all_repositories() {
  command -v git; [ "$?" -eq 0 ] || { echo "Install: git"; return 1; }

  local TRUNK=master
  local WORKDIR="$PWD"
  local SEARCH_PATTERN="**/*/.git"
  local MAX_SEARCH_DEPTH=4
  local PULL_TIMEOUT=60

  trap '{ printf "Caught interrupt!"; cd "$WORKDIR"; return 1; }' SIGINT

  while read -d '' PATH_TO_GITDIR; do
    local REPOSITORY=$(dirname $PATH_TO_GITDIR)

    printf "\n>>> Syncing $REPOSITORY... "

    cd "$REPOSITORY"
      $(command git diff-index --quiet HEAD); NO_CHANGES="$?"

      if [ "$NO_CHANGES" -ne 0 ]; then
        printf "Stashing existing changes... "
        command git stash --quiet
      fi

      command git checkout --quiet "$TRUNK"
      timeout "$PULL_TIMEOUT" command git pull origin "$TRUNK"
      [ "$?" -eq 0 ] && printf "Done!" || printf "Timeout!"
    cd $OLDPWD
  done <<(find "$WORKDIR" -type d \
                          -maxdepth "$MAX_SEARCH_DEPTH" \
                          -path "$SEARCH_PATTERN" \
                          -print0)

  # Reset traps
  trap - SIGINT
}
